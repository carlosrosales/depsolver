function bem_save()

/*****************************************************************************/
/* File		 : bem_save.pcl                                                  */
/* Author    : Carlos Rosales Fernandez (carlos@ihpc.a-star.edu.sg)          */
/* Date      : 01-09-2006                                                    */
/* Revision  : 1.0                                                           */
/*****************************************************************************/
/* Dumps mesh and boundary conditions from Patran for later use with         */
/* depSolver or thSolver.                                                    */
/*****************************************************************************/

/*****************************************************************************/
/* COPYRIGHT & LICENSE INFORMATION                                           */
/*                                                                           */
/* Copyright 2006 Carlos Rosales Fernandez and The Institute of High         */
/* Performance Computing (A*STAR)                                            */
/*                                                                           */
/* bem_save is free software; you can redistribute it and/or modify          */
/* it under the terms of the GNU General Public License as published by      */
/* the Free Software Foundation; either version 2 of the License, or         */
/* (at your option) any later version.                                       */
/*                                                                           */
/* bem_save is distributed in the hope that it will be useful,               */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of            */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             */
/* GNU General Public License for more details.                              */
/*                                                                           */
/* You should have received a copy of the GNU General Public License         */
/* along with bem_save; if not, write to the Free Software                   */
/* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/
/*****************************************************************************/

/*************************/
/*DECLARE LOCAL VARIABLES*/
/*************************/

integer nodes_per_elem,i,j,chan_1,status,num_elems,num_nodes
integer load_case_id,load_case_type,num_loads
integer load_var_id,entity_type,entity_id,sub_entity_id
integer node_position,region_type,num_values
integer load_type,application_type,dynamic_flag
integer cid_flag,acid_mod,ap_reg_couple,app_reg_order,equiv_flag

integer elem_ids(virtual)
integer connect(virtual)
integer topo_codes(virtual)
integer shape_codes(virtual)
integer nodes_per_elem_array(virtual)
integer ref_coords(virtual)
integer analy_coords(virtual)
integer node_ids(virtual)
integer load_ids(virtual)
integer load_priorities(virtual)

integer geo_fem(2)
integer target_elem_dim(2)
integer null_vector(3)

real evaluation_point,scale_factor

real glob_xyzs(virtual)

real load_value(3)

string elem_ids_str[9]
string c_str1[9]
string c_str2[9]
string c_str3[9]
string c_str4[9]
string c_str5[9]
string c_str6[9]
string c_str7[9]
string c_str8[9]
string node_ids_str[9]
string gnc_strx[16]
string gnc_stry[16]
string gnc_strz[16]
string filespec[80]
string outstr[100]
string load_case_name[80]
string load_case_description[80]
string dynamic_case_name[80]
string load_name[80]

/*****************************************/
/*FIND INFO NECESSARY TO GET CONNECTIVITY*/
/*****************************************/

/*Find number of elements in database*/
status = db_count_elems(num_elems)
dump num_elems

/*Allocate memory for element manipulation*/
sys_allocate_array(nodes_per_elem_array,1,num_elems)
sys_allocate_array(shape_codes,1,num_elems)
sys_allocate_array(topo_codes,1,num_elems)
sys_allocate_array(elem_ids,1,num_elems)

/*Get element IDs*/
status = db_get_elem_ids(num_elems,elem_ids)
dump elem_ids

/*Get element topology*/
status = db_get_elem_etop(num_elems,elem_ids,topo_codes)
dump topo_codes

/*Get the number of nodes per element*/
status = db_get_elem_topology_data(num_elems,topo_codes,@
	shape_codes,nodes_per_elem_array)
nodes_per_elem = nodes_per_elem_array(1)
dump nodes_per_elem
dump nodes_per_elem_array
dump shape_codes

/*Allocate memory for the connectivity*/
sys_allocate_array(connect,1,nodes_per_elem*num_elems)

/*Get the node's connectivity for this mesh*/
status = db_get_nodes_for_elems(num_elems,nodes_per_elem,elem_ids,connect)
dump connect

/*************************************************************/
/*Write connectivity for a tria3 mesh to file conectivity.out*/
/*************************************************************/

if(nodes_per_elem == 3) then

/*Write connectivity to file*/
file_build_fname("","elems","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)

/*loop over the elements*/
for(i=1 to num_elems)
	elem_ids_str=str_from_integer(elem_ids(i))
	c_str1=str_from_integer(connect((i-1)*3+1))
	c_str2=str_from_integer(connect((i-1)*3+2))
	c_str3=str_from_integer(connect((i-1)*3+3))
	outstr=elem_ids_str//@
		"	"//c_str1//@
		"	"//c_str2//@
		"	"//c_str3
	text_write_string(chan_1,outstr)
	dump(outstr)
end for

text_close(chan_1,"")

end if

/*************************************************************/
/*Write connectivity for a tria6 mesh to file conectivity.out*/
/*************************************************************/

if(nodes_per_elem == 6) then

/*Write connectivity to file*/
file_build_fname("","elems","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)

/*loop over the elements*/
for(i=1 to num_elems)
	elem_ids_str=str_from_integer(elem_ids(i))
	c_str1=str_from_integer(connect((i-1)*6+1))
	c_str2=str_from_integer(connect((i-1)*6+2))
	c_str3=str_from_integer(connect((i-1)*6+3))
	c_str4=str_from_integer(connect((i-1)*6+4))
	c_str5=str_from_integer(connect((i-1)*6+5))
	c_str6=str_from_integer(connect((i-1)*6+6))
	outstr=elem_ids_str//@
		"	"//c_str1//@
		"	"//c_str2//@
		"	"//c_str3//@
		"	"//c_str4//@
		"	"//c_str5//@
		"	"//c_str6
	text_write_string(chan_1,outstr)
	dump(outstr)
end for

text_close(chan_1,"")

end if

/*************************************************************/
/*Write connectivity for a quad4 mesh to file conectivity.out*/
/*************************************************************/

if(nodes_per_elem == 4) then

/*Write connectivity to file*/
file_build_fname("","elems","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)

/*loop over the elements*/
for(i=1 to num_elems)
	elem_ids_str=str_from_integer(elem_ids(i))
	c_str1=str_from_integer(connect((i-1)*4+1))
	c_str2=str_from_integer(connect((i-1)*4+2))
	c_str3=str_from_integer(connect((i-1)*4+3))
	c_str4=str_from_integer(connect((i-1)*4+4))
	outstr=elem_ids_str//@
		"	"//c_str1//@
		"	"//c_str2//@
		"	"//c_str3//@
		"	"//c_str4
	text_write_string(chan_1,outstr)
	dump(outstr)
end for

text_close(chan_1,"")

end if

/*************************************************************/
/*Write connectivity for a quad8 mesh to file conectivity.out*/
/*************************************************************/

if(nodes_per_elem == 8) then

/*Write connectivity to file*/
file_build_fname("","elems","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)

/*loop over the elements*/
for(i=1 to num_elems)
	elem_ids_str=str_from_integer(elem_ids(i))
	c_str1=str_from_integer(connect((i-1)*8+1))
	c_str2=str_from_integer(connect((i-1)*8+2))
	c_str3=str_from_integer(connect((i-1)*8+3))
	c_str4=str_from_integer(connect((i-1)*8+4))
	c_str5=str_from_integer(connect((i-1)*8+5))
	c_str6=str_from_integer(connect((i-1)*8+6))
	c_str7=str_from_integer(connect((i-1)*8+7))
	c_str8=str_from_integer(connect((i-1)*8+8))
	outstr=elem_ids_str//@
		"	"//c_str1//@
		"	"//c_str2//@
		"	"//c_str3//@
		"	"//c_str4//@
		"	"//c_str5//@
		"	"//c_str6//@
		"	"//c_str7//@
		"	"//c_str8
	text_write_string(chan_1,outstr)
	dump(outstr)
end for

text_close(chan_1,"")

end if

/******************************************/
/*FIND INFO NEEDED TO GET NODE COORDINATES*/
/******************************************/

/*Get the number of nodes*/
status = db_count_nodes(num_nodes)
dump num_nodes

/*Allocate memory for node manipulation*/
sys_allocate_array(node_ids,1,num_nodes)
sys_allocate_array(ref_coords,1,num_nodes)
sys_allocate_array(analy_coords,1,num_nodes)
sys_allocate_array(glob_xyzs,1,num_nodes,1,3)

/*Get the nodes IDs*/
status = db_get_node_ids(num_nodes,node_ids)
dump node_ids

/*Get nodes coordinates*/
status = db_get_nodes(num_nodes,node_ids,ref_coords,@
	analy_coords,glob_xyzs)
dump ref_coords
dump analy_coords
dump glob_xyzs

/********************************************************/
/*Write node coordinates for this mesh to file nodes.out*/
/********************************************************/

file_build_fname("","nodes","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)

/*Loop over the nodes*/
for(i=1 to num_nodes)
	node_ids_str=str_from_integer(node_ids(i))
	gnc_strx=str_from_real(glob_xyzs(i,1))
	gnc_stry=str_from_real(glob_xyzs(i,2))
	gnc_strz=str_from_real(glob_xyzs(i,3))
	outstr=node_ids_str//@
		"	"//gnc_strx//@
		"	"//gnc_stry//@
		"	"//gnc_strz
	text_write_string(chan_1,outstr)
	dump(outstr)
end for
text_close(chan_1,"")

/******************************************/
/*Write general mesh info to mesh_info.out*/
/******************************************/
file_build_fname("","mesh_info","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)
text_write_string(chan_1,"Elems	Nodes	NodesInElem")

c_str1 = str_from_integer(num_elems)
c_str2 = str_from_integer(num_nodes)
c_str3 = str_from_integer(nodes_per_elem)
outstr = c_str1//"	"//c_str2//"	"//c_str3
text_write_string(chan_1,outstr)
text_close(chan_1,"")

/*************************/
/*GET BOUNDARY CONDITIONS*/
/*************************/

/*Find type active load case name*/
status = db_get_active_load_case(load_case_name)

/*Count the number of loads*/
status = db_count_lbc_by_load_case(load_case_name,num_loads)

/*Allocate memory*/
sys_allocate_array(load_ids,1,num_loads)
sys_allocate_array(load_priorities,1,num_loads)

/*Get load data for this case*/
status = db_get_load_case(load_case_name,load_case_id,load_case_type,@
	load_case_description,num_loads,load_ids,dynamic_case_name,@
	evaluation_point,load_priorities)
dump(load_case_name)
dump(load_case_id)
dump(load_case_type)
dump(load_case_description)
dump(num_loads)
dump(load_ids)
dump(dynamic_case_name)
dump(evaluation_point)
dump(load_priorities)

/*Organize the load data*/
status = loadsbcs_eval_all()

/*Write header for output file*/
file_build_fname("","bcs","out","N",filespec)
text_open(filespec,"NW",0,0,chan_1)


/*Loop over the number of types of BCs for this load case*/
/*Types are forces, moments, displacements, etc... */
/*Real par is stored first, then imaginary*/
for(i=1 to num_loads)
	status = db_get_lbc_new(load_ids(i),load_name,application_type,@
		load_type,target_elem_dim,dynamic_flag,cid_flag,@
		scale_factor,geo_fem,ap_reg_couple,app_reg_order,@
		equiv_flag,acid_mod)
	dump(load_name)
	dump load_type
	dump(application_type)
	dump(dynamic_flag)

	/*Needed to control inner loop*/
	status = db_get_lbc_fem_count(load_ids(i),num_values)
	dump(load_ids(i))
	dump(num_values)

	status = db_get_all_fem_sv_by_id(load_ids(i))
	
	/*Loop over the number of discrete applications of this load*/
	for(j=1 to num_values)
		status = db_get_next_fem_sv_by_id(load_var_id,entity_type,@
			entity_id,sub_entity_id,load_value,null_vector,@
			scale_factor,node_position,region_type)
		c_str1 = "--"
		c_str2 = "--"
		c_str3 = "--"
		c_str4 = "--"
		c_str5 = "--"
		c_str6 = "--"
		c_str7 = "--"

		if(load_type == 6) then
			if(entity_type != 123) then
				text_write_string(chan_1,@
				"LOADS MUST BE APPLIED AT THE NODES")
			end if
			c_str1 = str_from_integer(entity_id)
			if(null_vector(1) == 0) then
				c_str2 = str_from_real(load_value(1))
			end if
			if(null_vector(2) == 0) then
				c_str3 = str_from_real(load_value(2))
			end if
			outstr = ""//c_str1//@
				"	"//c_str2//@
				"	"//c_str3
			text_write_string(chan_1,outstr)
		end if
		
		if(load_type == 7) then
			if(entity_type != 123) then
				text_write_string(chan_1,@
				"LOADS MUST BE APPLIED AT THE NODES")
			end if
			c_str1 = str_from_integer(entity_id)
			if(null_vector(1) == 0) then
				c_str2 = str_from_real(load_value(1))
			end if
			if(null_vector(2) == 0) then
				c_str3 = str_from_real(load_value(2))
			end if
			if(null_vector(3) == 0) then
				c_str4 = str_from_real(load_value(3))
			end if
			outstr = ""//c_str1//@
				"	"//c_str2//@
				"	"//c_str3//@
				"	"//c_str4
			text_write_string(chan_1,outstr)
		end if
		
	dump(outstr)
	dump(load_var_id)
	dump(entity_type)
	dump(entity_id)
	dump(sub_entity_id)
	dump(load_value)
	dump(null_vector)
	dump(scale_factor)
	dump(node_position)
	dump(region_type)

	end for
end for

text_close(chan_1,"")

end function
